// Ishtiaqcourage.cpp : Defines the entry point for the console application.
//

#include "basic.h"




using namespace std;



int main() 
{	
	Timer1 timer;
	char c;
	const int length=100;
	double time_measure[length];
	double *result_time=0;
        unsigned long long cpu_cycles[length];
        unsigned long long* result_cpu;
        unsigned long long cycles;
        
	
	cout<<"\nImplementation of Unbalanced Oil and Vinegar Scheme\n";
	
	load_key_sign_hash();
	

	cout<<"\n\nSinature Verification ...\n";
	
        for(int i=0;i<length;i++)
	{   
		timer.start();// Start the timer
		cpu_cycles[i] = rdtsc(); 
    		signverification();
                cpu_cycles[i] = rdtsc() - cpu_cycles[i];           
		timer.stop();// Stop the timer
                time_measure[i]=timer.getElapsedTimeInMicroSec();
               
	}
	
	if(result==1)
		cout<<"Authenticated\n";
	else
		cout<<"Failed\n";
	
	result_time=ave_max_min(time_measure,length);
	cout<<"Time Elapsed in  Micro-Seconds for Signature Verification\n";
	cout<<"Average Time: "<<result_time[0]<<"\nMaximum Time: "<<result_time[1]<<"\nMinimum Time: "<<result_time[2];
        
	result_cpu=ave_max_min_cpu(cpu_cycles,length);
	cout<<"\n\nNumber of Cpu Cycles used for Signature Verification\n";
	cout<<"Average Cpu Cycles: "<<result_cpu[0]<<"\nMaximum Cpu Cycles: "<<result_cpu[1]<<"\nMinimum Cpu Cycles: "<<result_cpu[2];	
	
	
	
	cout<<"\nWriting Hash values generated by signature verification and result of verification in \nhome\\ishtiaq\\lrsuov_output";
	cout<<"\\Signature Verification.txt...\n";
	print_signatureverification(result);
	cout<<"Completed\n\n";

	
	return 0;
}




 


